{"version":3,"sources":["components/api-authorization/ApiAuthorizationConstants.js","components/api-authorization/AuthorizeService.js","components/api-authorization/LoginMenu.js","components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Counter.js","components/api-authorization/AuthorizeRoute.js","components/api-authorization/Login.js","components/api-authorization/Logout.js","components/api-authorization/ApiAuthorizationRoutes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ApplicationName","QueryParameterNames","LogoutActions","LoginActions","prefix","ApplicationPaths","DefaultLoginRedirectPath","ApiAuthorizationClientConfigurationUrl","ApiAuthorizationPrefix","Login","LoginFailed","LoginCallback","Register","Profile","LogOut","LoggedOut","LogOutCallback","IdentityRegisterPath","IdentityManagePath","AuthorizeService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","a","this","getUser","user","profile","ensureUserManagerInitialized","userManager","access_token","state","signinSilent","createArguments","silentUser","updateState","success","console","log","Error","signinPopup","popUpUser","message","error","signinRedirect","redirect","url","signinCallback","signoutPopup","undefined","signoutRedirect","signoutCallback","response","data","notifySubscribers","callback","push","subscription","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ok","json","settings","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","WebStorageStateStore","UserManager","events","addUserSignedOut","removeUser","authService","LoginMenu","props","isAuthenticated","userName","_subscription","subscribe","populateState","unsubscribe","Promise","all","setState","name","profilePath","logoutPath","pathname","local","authenticatedView","registerPath","loginPath","anonymousView","NavItem","NavLink","tag","Link","className","to","Component","NavMenu","toggleNavbar","bind","collapsed","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","displayName","Layout","children","Home","href","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","getAccessToken","token","headers","forecast","date","temperatureC","temperatureF","summary","Counter","audioContext","window","AudioContext","webkitAudioContext","React","useState","blob","setBlob","recorder","Recorder","navigator","mediaDevices","getUserMedia","audio","then","stream","init","catch","err","start","stop","buffer","FormData","append","axios","post","download","AuthorizeRoute","ready","authenticated","authenticationChanged","populateAuthenticationState","link","document","createElement","path","returnUrl","protocol","host","search","hash","redirectUrl","encodeURIComponent","component","rest","render","action","login","getReturnUrl","processLoginCallback","URLSearchParams","location","get","redirectToProfile","redirectToRegister","signIn","result","navigateToReturnUrl","completeSignIn","fromQuery","startsWith","origin","redirectToApiAuthorizationPath","encodeURI","apiAuthorizationPath","replace","Logout","isReady","history","logout","processLogoutCallback","signOut","completeSignOut","ApiAuthorizationRoutes","loginAction","logoutAction","App","exact","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","basename","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.cdc2f6d0.chunk.js","sourcesContent":["export const ApplicationName = 'Dotnet_Final_Complete';\r\n\r\nexport const QueryParameterNames = {\r\n  ReturnUrl: 'returnUrl',\r\n  Message: 'message'\r\n};\r\n\r\nexport const LogoutActions = {\r\n  LogoutCallback: 'logout-callback',\r\n  Logout: 'logout',\r\n  LoggedOut: 'logged-out'\r\n};\r\n\r\nexport const LoginActions = {\r\n  Login: 'login',\r\n  LoginCallback: 'login-callback',\r\n  LoginFailed: 'login-failed',\r\n  Profile: 'profile',\r\n  Register: 'register'\r\n};\r\n\r\nconst prefix = '/authentication';\r\n\r\nexport const ApplicationPaths = {\r\n  DefaultLoginRedirectPath: '/',\r\n  ApiAuthorizationClientConfigurationUrl: `_configuration/${ApplicationName}`,\r\n  ApiAuthorizationPrefix: prefix,\r\n  Login: `${prefix}/${LoginActions.Login}`,\r\n  LoginFailed: `${prefix}/${LoginActions.LoginFailed}`,\r\n  LoginCallback: `${prefix}/${LoginActions.LoginCallback}`,\r\n  Register: `${prefix}/${LoginActions.Register}`,\r\n  Profile: `${prefix}/${LoginActions.Profile}`,\r\n  LogOut: `${prefix}/${LogoutActions.Logout}`,\r\n  LoggedOut: `${prefix}/${LogoutActions.LoggedOut}`,\r\n  LogOutCallback: `${prefix}/${LogoutActions.LogoutCallback}`,\r\n  IdentityRegisterPath: 'Identity/Account/Register',\r\n  IdentityManagePath: 'Identity/Account/Manage'\r\n};\r\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\r\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\r\n\r\nexport class AuthorizeService {\r\n    _callbacks = [];\r\n    _nextSubscriptionId = 0;\r\n    _user = null;\r\n    _isAuthenticated = false;\r\n\r\n    // By default pop ups are disabled because they don't work properly on Edge.\r\n    // If you want to enable pop up authentication simply set this flag to false.\r\n    _popUpDisabled = true;\r\n\r\n    async isAuthenticated() {\r\n        const user = await this.getUser();\r\n        return !!user;\r\n    }\r\n\r\n    async getUser() {\r\n        if (this._user && this._user.profile) {\r\n            return this._user.profile;\r\n        }\r\n\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.profile;\r\n    }\r\n\r\n    async getAccessToken() {\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.access_token;\r\n    }\r\n\r\n    // We try to authenticate the user in three different ways:\r\n    // 1) We try to see if we can authenticate the user silently. This happens\r\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n    //    on the client.\r\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n    //    redirect flow.\r\n    async signIn(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\r\n            this.updateState(silentUser);\r\n            return this.success(state);\r\n        } catch (silentError) {\r\n            // User might not be authenticated, fallback to popup authentication\r\n            console.log(\"Silent authentication error: \", silentError);\r\n\r\n            try {\r\n                if (this._popUpDisabled) {\r\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n                }\r\n\r\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\r\n                this.updateState(popUpUser);\r\n                return this.success(state);\r\n            } catch (popUpError) {\r\n                if (popUpError.message === \"Popup window closed\") {\r\n                    // The user explicitly cancelled the login action by closing an opened popup.\r\n                    return this.error(\"The user closed the window.\");\r\n                } else if (!this._popUpDisabled) {\r\n                    console.log(\"Popup authentication error: \", popUpError);\r\n                }\r\n\r\n                // PopUps might be blocked by the user, fallback to redirect\r\n                try {\r\n                    await this.userManager.signinRedirect(this.createArguments(state));\r\n                    return this.redirect();\r\n                } catch (redirectError) {\r\n                    console.log(\"Redirect authentication error: \", redirectError);\r\n                    return this.error(redirectError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignIn(url) {\r\n        try {\r\n            await this.ensureUserManagerInitialized();\r\n            const user = await this.userManager.signinCallback(url);\r\n            this.updateState(user);\r\n            return this.success(user && user.state);\r\n        } catch (error) {\r\n            console.log('There was an error signing in: ', error);\r\n            return this.error('There was an error signing in.');\r\n        }\r\n    }\r\n\r\n    // We try to sign out the user in two different ways:\r\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\r\n    //    post logout redirect flow.\r\n    async signOut(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            if (this._popUpDisabled) {\r\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n            }\r\n\r\n            await this.userManager.signoutPopup(this.createArguments());\r\n            this.updateState(undefined);\r\n            return this.success(state);\r\n        } catch (popupSignOutError) {\r\n            console.log(\"Popup signout error: \", popupSignOutError);\r\n            try {\r\n                await this.userManager.signoutRedirect(this.createArguments(state));\r\n                return this.redirect();\r\n            } catch (redirectSignOutError) {\r\n                console.log(\"Redirect signout error: \", redirectSignOutError);\r\n                return this.error(redirectSignOutError);\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignOut(url) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const response = await this.userManager.signoutCallback(url);\r\n            this.updateState(null);\r\n            return this.success(response && response.data);\r\n        } catch (error) {\r\n            console.log(`There was an error trying to log out '${error}'.`);\r\n            return this.error(error);\r\n        }\r\n    }\r\n\r\n    updateState(user) {\r\n        this._user = user;\r\n        this._isAuthenticated = !!this._user;\r\n        this.notifySubscribers();\r\n    }\r\n\r\n    subscribe(callback) {\r\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\r\n        return this._nextSubscriptionId - 1;\r\n    }\r\n\r\n    unsubscribe(subscriptionId) {\r\n        const subscriptionIndex = this._callbacks\r\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\r\n            .filter(element => element.found === true);\r\n        if (subscriptionIndex.length !== 1) {\r\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\r\n        }\r\n\r\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\r\n    }\r\n\r\n    notifySubscribers() {\r\n        for (let i = 0; i < this._callbacks.length; i++) {\r\n            const callback = this._callbacks[i].callback;\r\n            callback();\r\n        }\r\n    }\r\n\r\n    createArguments(state) {\r\n        return { useReplaceToNavigate: true, data: state };\r\n    }\r\n\r\n    error(message) {\r\n        return { status: AuthenticationResultStatus.Fail, message };\r\n    }\r\n\r\n    success(state) {\r\n        return { status: AuthenticationResultStatus.Success, state };\r\n    }\r\n\r\n    redirect() {\r\n        return { status: AuthenticationResultStatus.Redirect };\r\n    }\r\n\r\n    async ensureUserManagerInitialized() {\r\n        if (this.userManager !== undefined) {\r\n            return;\r\n        }\r\n\r\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\r\n        if (!response.ok) {\r\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\r\n        }\r\n\r\n        let settings = await response.json();\r\n        settings.automaticSilentRenew = true;\r\n        settings.includeIdTokenInSilentRenew = true;\r\n        settings.userStore = new WebStorageStateStore({\r\n            prefix: ApplicationName\r\n        });\r\n\r\n        this.userManager = new UserManager(settings);\r\n\r\n        this.userManager.events.addUserSignedOut(async () => {\r\n            await this.userManager.removeUser();\r\n            this.updateState(undefined);\r\n        });\r\n    }\r\n\r\n    static get instance() { return authService }\r\n}\r\n\r\nconst authService = new AuthorizeService();\r\n\r\nexport default authService;\r\n\r\nexport const AuthenticationResultStatus = {\r\n    Redirect: 'redirect',\r\n    Success: 'success',\r\n    Fail: 'fail'\r\n};\r\n","import React, { Component, Fragment } from 'react';\r\nimport { NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport authService from './AuthorizeService';\r\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\nexport class LoginMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isAuthenticated: false,\r\n            userName: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.populateState());\r\n        this.populateState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    async populateState() {\r\n        const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()])\r\n        this.setState({\r\n            isAuthenticated,\r\n            userName: user && user.name\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isAuthenticated, userName } = this.state;\r\n        if (!isAuthenticated) {\r\n            const registerPath = `${ApplicationPaths.Register}`;\r\n            const loginPath = `${ApplicationPaths.Login}`;\r\n            return this.anonymousView(registerPath, loginPath);\r\n        } else {\r\n            const profilePath = `${ApplicationPaths.Profile}`;\r\n            const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\r\n            return this.authenticatedView(userName, profilePath, logoutPath);\r\n        }\r\n    }\r\n\r\n    authenticatedView(userName, profilePath, logoutPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={profilePath}>Hello {userName}</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={logoutPath}>Logout</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n\r\n    }\r\n\r\n    anonymousView(registerPath, loginPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={registerPath}>Register</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={loginPath}>Login</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { LoginMenu } from './api-authorization/LoginMenu';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Dotnet_Final_Complete</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                </NavItem>\r\n                <LoginMenu>\r\n                </LoginMenu>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <p>Welcome to your new single-page application, built with:</p>\r\n        <ul>\r\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n        </ul>\r\n        <p>To help you get started, we have also set up:</p>\r\n        <ul>\r\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n        </ul>\r\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport authService from './api-authorization/AuthorizeService'\r\n\r\nexport class FetchData extends Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { forecasts: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateWeatherData();\r\n  }\r\n\r\n  static renderForecastsTable(forecasts) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {forecasts.map(forecast =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateWeatherData() {\r\n    const token = await authService.getAccessToken();\r\n    const response = await fetch('weatherforecast', {\r\n      headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    // console.log(response);\r\n    const data = await response.json();\r\n    this.setState({ forecasts: data, loading: false });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Recorder from \"recorder-js\";\r\n\r\nexport default function Counter() {\r\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n  const [blob, setBlob] = React.useState(null);\r\n\r\n  const recorder = new Recorder(audioContext, {\r\n    // An array of 255 Numbers\r\n    // You can use this to visualize the audio stream\r\n    // If you use react, check out react-wave-stream\r\n    // onAnalysed: (data) => console.log(data),\r\n  });\r\n\r\n  let isRecording = false;\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia({ audio: true })\r\n    .then((stream) => recorder.init(stream))\r\n    .catch((err) => console.log(\"Uh oh... unable to get stream...\", err));\r\n\r\n  function startRecording() {\r\n    recorder.start().then(() => (isRecording = true));\r\n  }\r\n\r\n  function stopRecording() {\r\n    recorder.stop().then(({ blob, buffer }) => {\r\n      setBlob(blob);\r\n\r\n      // buffer is an AudioBuffer\r\n    });\r\n  }\r\n\r\n  function download() {\r\n    let data = new FormData();\r\n\r\n    data.append(\"blob\", blob, \"audio.wav\");\r\n\r\n    const config = {\r\n      headers: { \"content-type\": \"multipart/form-data\" },\r\n    };\r\n    axios.post(\"/speech\", data, config);\r\n    Recorder.download(blob, \"my-audio-file\"); // downloads a .wav file\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Counter</h1>\r\n\r\n      <p>This is a simple example of a React component.</p>\r\n\r\n      {/* <p aria-live='polite'>\r\n        Current count: <strong>{this.state.currentCount}</strong>\r\n      </p> */}\r\n\r\n      <button className='btn btn-primary' onClick={startRecording}>\r\n        Record Audio\r\n      </button>\r\n\r\n      <button id='stop' className='btn btn-primary' onClick={stopRecording}>\r\n        Stop\r\n      </button>\r\n      <button id='send' className='btn btn-primary' onClick={download}>\r\n        Send\r\n      </button>\r\n      <audio id='audioDiv'></audio>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants'\r\nimport authService from './AuthorizeService'\r\n\r\nexport default class AuthorizeRoute extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ready: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.authenticationChanged());\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    render() {\r\n        const { ready, authenticated } = this.state;\r\n        var link = document.createElement(\"a\");\r\n        link.href = this.props.path;\r\n        const returnUrl = `${link.protocol}//${link.host}${link.pathname}${link.search}${link.hash}`;\r\n        const redirectUrl = `${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURIComponent(returnUrl)}`\r\n        if (!ready) {\r\n            return <div></div>;\r\n        } else {\r\n            const { component: Component, ...rest } = this.props;\r\n            return <Route {...rest}\r\n                render={(props) => {\r\n                    if (authenticated) {\r\n                        return <Component {...props} />\r\n                    } else {\r\n                        return <Redirect to={redirectUrl} />\r\n                    }\r\n                }} />\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ ready: true, authenticated });\r\n    }\r\n\r\n    async authenticationChanged() {\r\n        this.setState({ ready: false, authenticated: false });\r\n        await this.populateAuthenticationState();\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\nexport class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LoginActions.Login:\r\n                this.login(this.getReturnUrl());\r\n                break;\r\n            case LoginActions.LoginCallback:\r\n                this.processLoginCallback();\r\n                break;\r\n            case LoginActions.LoginFailed:\r\n                const params = new URLSearchParams(window.location.search);\r\n                const error = params.get(QueryParameterNames.Message);\r\n                this.setState({ message: error });\r\n                break;\r\n            case LoginActions.Profile:\r\n                this.redirectToProfile();\r\n                break;\r\n            case LoginActions.Register:\r\n                this.redirectToRegister();\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const action = this.props.action;\r\n        const { message } = this.state;\r\n\r\n        if (!!message) {\r\n            return <div>{message}</div>\r\n        } else {\r\n            switch (action) {\r\n                case LoginActions.Login:\r\n                    return (<div>Processing login</div>);\r\n                case LoginActions.LoginCallback:\r\n                    return (<div>Processing login callback</div>);\r\n                case LoginActions.Profile:\r\n                case LoginActions.Register:\r\n                    return (<div></div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async login(returnUrl) {\r\n        const state = { returnUrl };\r\n        const result = await authService.signIn(state);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                break;\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(returnUrl);\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid status result ${result.status}.`);\r\n        }\r\n    }\r\n\r\n    async processLoginCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignIn(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeSignIn finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\r\n        }\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\r\n    }\r\n\r\n    redirectToRegister() {\r\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\r\n    }\r\n\r\n    redirectToProfile() {\r\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n    }\r\n\r\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\r\n        const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n        // It's important that we do a replace here so that when the user hits the back arrow on the\r\n        // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n        // component.\r\n        window.location.replace(redirectUrl);\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        // It's important that we do a replace here so that we remove the callback uri with the\r\n        // fragment containing the tokens from the browser history.\r\n        window.location.replace(returnUrl);\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's logout process.\r\n// This is the starting point for the logout process, which is usually initiated when a\r\n// user clicks on the logout button on the LoginMenu component.\r\nexport class Logout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined,\r\n            isReady: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LogoutActions.Logout:\r\n                if (!!window.history.state.state.local) {\r\n                    this.logout(this.getReturnUrl());\r\n                } else {\r\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\r\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\r\n                }\r\n                break;\r\n            case LogoutActions.LogoutCallback:\r\n                this.processLogoutCallback();\r\n                break;\r\n            case LogoutActions.LoggedOut:\r\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    render() {\r\n        const { isReady, message } = this.state;\r\n        if (!isReady) {\r\n            return <div></div>\r\n        }\r\n        if (!!message) {\r\n            return (<div>{message}</div>);\r\n        } else {\r\n            const action = this.props.action;\r\n            switch (action) {\r\n                case LogoutActions.Logout:\r\n                    return (<div>Processing logout</div>);\r\n                case LogoutActions.LogoutCallback:\r\n                    return (<div>Processing logout callback</div>);\r\n                case LogoutActions.LoggedOut:\r\n                    return (<div>{message}</div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async logout(returnUrl) {\r\n        const state = { returnUrl };\r\n        const isauthenticated = await authService.isAuthenticated();\r\n        if (isauthenticated) {\r\n            const result = await authService.signOut(state);\r\n            switch (result.status) {\r\n                case AuthenticationResultStatus.Redirect:\r\n                    break;\r\n                case AuthenticationResultStatus.Success:\r\n                    await this.navigateToReturnUrl(returnUrl);\r\n                    break;\r\n                case AuthenticationResultStatus.Fail:\r\n                    this.setState({ message: result.message });\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Invalid authentication result status.\");\r\n            }\r\n        } else {\r\n            this.setState({ message: \"You successfully logged out!\" });\r\n        }\r\n    }\r\n\r\n    async processLogoutCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignOut(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeAuthentication finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid authentication result status.\");\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ isReady: true, authenticated });\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) ||\r\n            fromQuery ||\r\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        return window.location.replace(returnUrl);\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Login } from './Login'\r\nimport { Logout } from './Logout'\r\nimport { ApplicationPaths, LoginActions, LogoutActions } from './ApiAuthorizationConstants';\r\n\r\nexport default class ApiAuthorizationRoutes extends Component {\r\n\r\n  render () {\r\n    return(\r\n      <Fragment>\r\n          <Route path={ApplicationPaths.Login} render={() => loginAction(LoginActions.Login)} />\r\n          <Route path={ApplicationPaths.LoginFailed} render={() => loginAction(LoginActions.LoginFailed)} />\r\n          <Route path={ApplicationPaths.LoginCallback} render={() => loginAction(LoginActions.LoginCallback)} />\r\n          <Route path={ApplicationPaths.Profile} render={() => loginAction(LoginActions.Profile)} />\r\n          <Route path={ApplicationPaths.Register} render={() => loginAction(LoginActions.Register)} />\r\n          <Route path={ApplicationPaths.LogOut} render={() => logoutAction(LogoutActions.Logout)} />\r\n          <Route path={ApplicationPaths.LogOutCallback} render={() => logoutAction(LogoutActions.LogoutCallback)} />\r\n          <Route path={ApplicationPaths.LoggedOut} render={() => logoutAction(LogoutActions.LoggedOut)} />\r\n      </Fragment>);\r\n  }\r\n}\r\n\r\nfunction loginAction(name){\r\n    return (<Login action={name}></Login>);\r\n}\r\n\r\nfunction logoutAction(name) {\r\n    return (<Logout action={name}></Logout>);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route } from \"react-router\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { Home } from \"./components/Home\";\r\nimport { FetchData } from \"./components/FetchData\";\r\nimport Counter from \"./components/Counter\";\r\nimport AuthorizeRoute from \"./components/api-authorization/AuthorizeRoute\";\r\nimport ApiAuthorizationRoutes from \"./components/api-authorization/ApiAuthorizationRoutes\";\r\nimport { ApplicationPaths } from \"./components/api-authorization/ApiAuthorizationConstants\";\r\n\r\nimport \"./custom.css\";\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <AuthorizeRoute path='/fetch-data' component={FetchData} />\r\n        <Route\r\n          path={ApplicationPaths.ApiAuthorizationPrefix}\r\n          component={ApiAuthorizationRoutes}\r\n        />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}